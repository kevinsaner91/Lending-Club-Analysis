'mths_since_rcnt_il',
'total_bal_il',
'il_util',
'open_rv_12m',
'open_rv_24m',
'max_bal_bc',
'all_util',
'total_rev_hi_lim',
'inq_fi',
'total_cu_tl',
'inq_last_12m'))
# Check again visually
missing_data <- df_loan_cleaned %>% summarise_all(funs(sum(is.na(.))/n()))
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
ggplot(missing_data,
aes(x = reorder(variables, percent_missing),
y = percent_missing)) + geom_bar(stat = "identity",
fill = "red",
aes(color = I('white')),
size = 0.1)+coord_flip() + theme_few()
View(missing_data)
# Check again visually
missing_data <- loan_cleaned %>% summarise_all(funs(sum(is.na(.))/n()))
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
ggplot(missing_data,
aes(x = reorder(variables, percent_missing),
y = percent_missing)) + geom_bar(stat = "identity",
fill = "red",
aes(color = I('white')),
size = 0.1)+coord_flip() + theme_few()
options(repr.plot.width=6, repr.plot.height=8)
missing_data <- df_loan %>% summarise_all(funs(sum(is.na(.))/n()))
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
ggplot(missing_data,
aes(x = reorder(variables, percent_missing),
y = percent_missing)) + geom_bar(stat = "identity",
fill = "red",
aes(color = I('white')),
size = 0.1)+coord_flip() + theme_few()
# Check again visually
missing_data <- df_loan_cleaned %>% summarise_all(funs(sum(is.na(.))/n()))
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
ggplot(missing_data,
aes(x = reorder(variables, percent_missing),
y = percent_missing)) + geom_bar(stat = "identity",
fill = "red",
aes(color = I('white')),
size = 0.1)+coord_flip() + theme_few()
write.csv(x = df_loan_cleaned, file = "regression_loan_cleaned.csv")
df_sample <- sample_n(df_loan_cleaned,10000)
write.csv(x = df_sample, file = "regression_train_loan_sample_cleaned.csv")
View(df_sample)
df_loan_sample <- read.csv("regression_train_loan_sample_cleaned.csv",sep = ",", header = TRUE)
## CLEANUP ##
# Must not be performed but could improve performance!
rm(list = ls())
df_loan_sample <- read.csv("regression_train_loan_sample_cleaned.csv",sep = ",", header = TRUE)
# converting incorrect data types --> HAS TO BE CHEKED
df_loan_sample$term <- as.factor(df_loan_sample$term)
df_loan_sample$grade <- as.factor(df_loan_sample$grade)
df_loan_sample$emp_length <- as.factor(df_loan_sample$emp_length)
df_loan_sample$home_ownership <- as.factor(df_loan_sample$home_ownership)
df_loan_sample$verification_status <- as.factor(df_loan_sample$verification_status)
df_loan_sample$loan_status <- as.factor(df_loan_sample$loan_status)
df_loan_sample$application_type <- as.factor(df_loan_sample$application_type)
df_loan_sample$pymnt_plan <- as.factor(df_loan_sample$pymnt_plan)
df_loan_sample$initial_list_status <- as.factor(df_loan_sample$initial_list_status)
df_loan_sample$policy_code <- as.factor(df_loan_sample$policy_code)
# dates
df_loan_sample$issue_d <- parse_date(df_loan_sample$issue_d,format =  "%b-%Y")
# dates
df_loan_sample$issue_d <- parse_date(as.character(df_loan_sample$issue_d), format =  "%b-%Y")
df_loan_sample.loan.distribution <- df_loan_sample %>% group_by(loan_status) %>%
dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))
View(df_loan_sample.loan.distribution)
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Percent") + ylab("Loan_Status")
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip()
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Percent") + ylab("Loan_Status")
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Percent") + ylab("Percentage in the dataset in the loan status")
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Loan status values") + ylab("Percentage in the dataset in the loan status")
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Loan status") + ylab("Percentage in the dataset in the loan status")
df_loan <- read.csv("../regression_train_loan.csv",sep = ",", header = TRUE)
# get rid of columns having more than 10% of missing data
loan_cleaned_I <- df_loan[, -which(colMeans(is.na(df_loan)) > 0.1)]
# Check again visually
missing_data <- loan_cleaned_I %>% summarise_all(funs(sum(is.na(.))/n()))
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
ggplot(missing_data,
aes(x = reorder(variables, percent_missing),
y = percent_missing)) + geom_bar(stat = "identity",
fill = "red",
aes(color = I('white')),
size = 0.1)+coord_flip() + theme_few()
# Removing all columns already identified as not usable in the Excel - some already removed by the previous operation
df_loan_cleaned <- within(loan_cleaned_I, rm('X',
'url',
'id',
'member_id',
'installment',
'grade',
'emp_title',
'pymnt_plan',
'url',
'desc',
'title',
'delinq_2yrs',
'earliest_cr_line',
'pub_rec',
'last_pymnt_d',
'last_pymnt_amnt',
'next_pymnt_d',
'last_credit_pull_d',
'mths_since_last_major_derog',
'policy_code',
'open_acc_6m',
'open_il_6m',
'open_il_12m',
'open_il_24m',
'mths_since_rcnt_il',
'total_bal_il',
'il_util',
'open_rv_12m',
'open_rv_24m',
'max_bal_bc',
'all_util',
'total_rev_hi_lim',
'inq_fi',
'total_cu_tl',
'inq_last_12m'))
df_sample <- sample_n(df_loan_cleaned,10000)
library("readr") # data input
library('tidyr') # data wrangling
library('dplyr') # data manipulation
library('stringr') # string manipulation
library('ggplot2') # visualization
library('ggthemes') # visualization
library('corrplot') # visualization
library('lubridate') # date and time
library('purrr') # data manipulation
library('cowplot')
library(plotly)
library(maps)
library(fiftystater)
library(viridis)
df_sample <- sample_n(df_loan_cleaned,10000)
# converting incorrect data types to be able to work with them
# factor variables
df_loan_sample$term <- as.factor(df_loan_sample$term)
# df_loan_sample$grade <- as.factor(df_loan_sample$grade) # not in the data set after our analysis
df_loan_sample$emp_length <- as.factor(df_loan_sample$emp_length)
df_loan_sample$home_ownership <- as.factor(df_loan_sample$home_ownership)
df_loan_sample$verification_status <- as.factor(df_loan_sample$verification_status)
df_loan_sample$loan_status <- as.factor(df_loan_sample$loan_status)
df_loan_sample$application_type <- as.factor(df_loan_sample$application_type)
df_loan_sample$initial_list_status <- as.factor(df_loan_sample$initial_list_status)
# dates
df_loan_sample$issue_d <- parse_date(as.character(df_loan_sample$issue_d), format =  "%b-%Y")
# Analyze which data can be used for prediction and which might not help enough
# selecting, counting and grouping by status in sample:
df_loan_sample.loan.distribution <- df_loan_sample %>% group_by(loan_status) %>%
dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Loan status") + ylab("Percentage in the dataset in the loan status")
df_loan_sample <- filter(df_loan_sample, df_loan_sample$loan_status == "Fully Paid" | df_loan_sample$loan_status == "Charged Off")
## CLEANUP ##
# Must not be performed - but could improve performance!
rm(list = ls())
df_loan <- read.csv("../regression_train_loan.csv",sep = ",", header = TRUE)
# Checking summary of the data and getting first insights
summary(df_loan)
glimpse(df_loan)
# Check for duplicates
sum(duplicated(df_loan))
#################################################
##
## Removing all columns already identified as not usable in the Excel
## - some already removed by the previous operation
##
#################################################
df_loan_cleaned <- within(loan_cleaned_I, rm('X',
'url',
'id',
'member_id',
'installment',
'grade',
'emp_title',
'pymnt_plan',
'url',
'desc',
'title',
'delinq_2yrs',
'earliest_cr_line',
'pub_rec',
'last_pymnt_d',
'last_pymnt_amnt',
'next_pymnt_d',
'last_credit_pull_d',
'mths_since_last_major_derog',
'policy_code',
'open_acc_6m',
'open_il_6m',
'open_il_12m',
'open_il_24m',
'mths_since_rcnt_il',
'total_bal_il',
'il_util',
'open_rv_12m',
'open_rv_24m',
'max_bal_bc',
'all_util',
'total_rev_hi_lim',
'inq_fi',
'total_cu_tl',
'inq_last_12m'))
### get rid of columns having more than 10% of missing data
loan_cleaned_I <- df_loan[, -which(colMeans(is.na(df_loan)) > 0.1)]
write.csv(x = df_loan_cleaned, file = "../regression_loan_cleaned.csv")
#################################################
##
## Removing all columns already identified as not usable in the Excel
## - some already removed by the previous operation
##
#################################################
df_loan_cleaned <- within(loan_cleaned_I, rm('X',
'url',
'id',
'member_id',
'installment',
'grade',
'emp_title',
'pymnt_plan',
'url',
'desc',
'title',
'delinq_2yrs',
'earliest_cr_line',
'pub_rec',
'last_pymnt_d',
'last_pymnt_amnt',
'next_pymnt_d',
'last_credit_pull_d',
'mths_since_last_major_derog',
'policy_code',
'open_acc_6m',
'open_il_6m',
'open_il_12m',
'open_il_24m',
'mths_since_rcnt_il',
'total_bal_il',
'il_util',
'open_rv_12m',
'open_rv_24m',
'max_bal_bc',
'all_util',
'total_rev_hi_lim',
'inq_fi',
'total_cu_tl',
'inq_last_12m'))
write.csv(x = df_loan_cleaned, file = "../regression_loan_cleaned.csv")
# Analyze which data can be used for prediction and which might not help enough
# selecting, counting and grouping by status in sample:
df_loan_sample.loan.distribution <- df_loan_sample %>% group_by(loan_status) %>%
dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Loan status") + ylab("Percentage in the dataset in the loan status")
df_loan_sample <- read.csv("regression_train_loan_sample_cleaned.csv",sep = ",", header = TRUE)
# df_loan_sample$grade <- as.factor(df_loan_sample$grade) # not in the data set after our analysis
df_loan_sample$term <- as.factor(df_loan_sample$term)
df_loan_sample$emp_length <- as.factor(df_loan_sample$emp_length)
df_loan_sample$home_ownership <- as.factor(df_loan_sample$home_ownership)
df_loan_sample$verification_status <- as.factor(df_loan_sample$verification_status)
df_loan_sample$loan_status <- as.factor(df_loan_sample$loan_status)
df_loan_sample$application_type <- as.factor(df_loan_sample$application_type)
df_loan_sample$initial_list_status <- as.factor(df_loan_sample$initial_list_status)
# dates
df_loan_sample$issue_d <- parse_date(as.character(df_loan_sample$issue_d), format =  "%b-%Y")
df_loan_sample.loan.distribution
# Analyze which data can be used for prediction and which might not help enough
# selecting, counting and grouping by status in sample:
df_loan_sample.loan.distribution <- df_loan_sample %>% group_by(loan_status) %>%
dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))
ggplot(df_loan_sample.loan.distribution,
aes(x=reorder(loan_status, pct),
y=pct, colour=loan_status, fill=loan_status)) +
geom_bar(stat="identity",
aes(color = I('black')),
size = 0.1) + coord_flip() + theme(legend.position = "none")+ xlab("Loan status") + ylab("Percentage in the dataset in the loan status")
#################################################
##
##
##  II.I Simple analysis of the identified categorical variables
##  performed on the sample data set
##  (can be performed on all data if the input df is called dataset_to_analize and cleaned as shown above)
##
##
#################################################
dataset_to_analize <- df_loan_sample
# The target variable column Loan_status has 10 categories
# Our goal is to find out the driving factors for loan getting charged off, so we will only consider the data from Fully paid and charged off category, where we know the exact outcome of the loan category.
# And insert a new column with binary values for the fully paid column as 1 and charged off as 0.
dataset_to_analyze <- filter(dataset_to_analyze, dataset_to_analyze$loan_status == "Fully Paid" | dataset_to_analyze$loan_status == "Charged Off")
dataset_to_analyze <- mutate(dataset_to_analyze, binary_status=as.numeric(ifelse(dataset_to_analyze$loan_status == "Fully Paid", 1, 0)))
options(repr.plot.width=5, repr.plot.height=3)
#i. Term
dataset_to_analyze %>% group_by(term) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = term, y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1)+xlab("Term") +
ylab("Percent")+ theme_few()
#################################################
##
##
##  II.I Simple analysis of the identified categorical variables
##  performed on the sample data set
##  (can be performed on all data if the input df is called dataset_to_analize and cleaned as shown above)
##
##
#################################################
dataset_to_analyze <- df_loan_sample
# The target variable column Loan_status has 10 categories
# Our goal is to find out the driving factors for loan getting charged off, so we will only consider the data from Fully paid and charged off category, where we know the exact outcome of the loan category.
# And insert a new column with binary values for the fully paid column as 1 and charged off as 0.
dataset_to_analyze <- filter(dataset_to_analyze, dataset_to_analyze$loan_status == "Fully Paid" | dataset_to_analyze$loan_status == "Charged Off")
dataset_to_analyze <- mutate(dataset_to_analyze, binary_status=as.numeric(ifelse(dataset_to_analyze$loan_status == "Fully Paid", 1, 0)))
options(repr.plot.width=5, repr.plot.height=3)
#i. Term
dataset_to_analyze %>% group_by(term) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = term, y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1)+xlab("Term") +
ylab("Percent")+ theme_few()
dataset_to_analyze
dataset_to_analyze <- mutate(dataset_to_analyze, status_flag=as.numeric(ifelse(dataset_to_analyze$loan_status == "Fully Paid", 1, 0)))
options(repr.plot.width=5, repr.plot.height=3)
#i. Term
dataset_to_analyze %>% group_by(term) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = term, y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1)+xlab("Term") +
ylab("Percent")+ theme_few()
#i. Term
dataset_to_analyze %>% group_by(term) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = term, y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1)+xlab("Term") +
ylab("Percent")+ theme_few()
#i. Term
dataset_to_analyze %>% group_by(term) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = term, y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1)+xlab("Term") +
ylab("Percent")+ theme_few()
#ii. Grade
dataset_to_analyze %>% group_by(grade) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(grade,-pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Grade") + ylab("Percent")+ theme_few()
#Grade B accounts for 30% of the loans
#iii. Employment Length
dataset_to_analyze %>% group_by(emp_length) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(emp_length, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Length of employment") + ylab("Percent")+coord_flip()+ theme_few()
#iii. Employment Length
dataset_to_analyze %>% group_by(emp_length) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(emp_length, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Length of employment") + ylab("Percent")+coord_flip()+ theme_few()
vi. Purpose
dataset_to_analyze %>% group_by(purpose) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(purpose, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Purpose of Loan") + ylab("Percent")+ coord_flip()+theme_few()
#debt consolidation accounts for 60% of the loans borrowed
dataset_to_analyze %>% group_by(emp_length) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(emp_length, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Length of employment") + ylab("Percent")+coord_flip()+ theme_few()
#vi. Purpose
dataset_to_analyze %>% group_by(purpose) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(purpose, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Purpose of Loan") + ylab("Percent")+ coord_flip()+theme_few()
#debt consolidation accounts for 60% of the loans borrowed
options(repr.plot.width=6, repr.plot.height=6)
#vii. State
dataset_to_analyze %>% group_by(addr_state) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(addr_state, pct), y = pct)) + geom_bar(stat = "identity", fill = "lightblue2", aes(color = I('black')), size = 0.1) +
xlab("State Wise Loan") + ylab("Percent")+ coord_flip()+theme_few()
#loans applied in CA are more
# Analysing the distribution of Continous variables
dataset_to_analyze %>% keep(is.numeric) %>% gather() %>%  ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram(bins=20, color= "black", fill= "#3399FF")
# Default with respect to Term: The percentage of default in case of loans with 60 months term is higher as compared to the loans with 36 months term.
options(repr.plot.width=6, repr.plot.height=4)
#i. Term and Loan Status
ggplot(dataset_to_analyze, aes(x =term, fill = loan_status)) + geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +
labs(x = 'Term') +
ylab("Percent of default Vs No default") +theme_few()
#ii. Grade and Loan Status
ggplot(dataset_to_analyze, aes(x = grade, fill = loan_status)) + geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +
labs(x = 'Grade') + scale_fill_discrete(name="Loan_Status") +theme_few()
#Default increases with increase in Grade from A-G, A means lowest risk of loan default and G means higher risk of loan default
#iii. Employee length and Loan Status
ggplot(filter(dataset_to_analyze, emp_length != 'n/a'), aes(x =emp_length, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'emp_length') +
scale_fill_discrete(name="Loan_Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.8, hjust=1))
#iii. Employment Length
dataset_to_analyze %>% group_by(emp_length) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(emp_length, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Length of employment") + ylab("Percent")+coord_flip()+ theme_few()
#vi. Purpose
dataset_to_analyze %>% group_by(purpose) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>%
ggplot(aes(x = reorder(purpose, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) +
xlab("Purpose of Loan") + ylab("Percent")+ coord_flip()+theme_few()
#debt consolidation accounts for 60% of the loans borrowed
#ii. Grade and Loan Status
ggplot(dataset_to_analyze, aes(x = grade, fill = loan_status)) + geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +
labs(x = 'Grade') + scale_fill_discrete(name="Loan_Status") +theme_few()
#Default increases with increase
#iii. Employee length and Loan Status
ggplot(filter(dataset_to_analyze, emp_length != 'n/a'), aes(x =emp_length, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'emp_length') +
scale_fill_discrete(name="Loan_Status") +
theme(axis.text.
#iii. Employee length and Loan Status
ggplot(filter(dataset_to_analyze, emp_length != 'n/a'), aes(x =emp_length, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'emp_length') +
scale_fill_discrete(name="Loan_Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.8, hjust=1))
#iii. Employee length and Loan Status
ggplot(filter(dataset_to_analyze, emp_length != 'n/a'), aes(x =emp_length, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'emp_length') +
scale_fill_discrete(name="Loan_Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.8, hjust=1))
#iv. Home Ownership and Loan Status
ggplot(dataset_to_analyze, aes(x =home_ownership, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'home_ownership') +
scale_fill_discrete(name="Loan_Status") +theme_few()
#The default rate in Ow
#v. Verification Status and Loan Status
ggplot(dataset_to_analyze, aes(x =verification_status, fill = loan_status)) +
geom_bar(stat='count', position='fill', aes(color = I('black')), size = 0.1) +labs(x = 'Verification_status',
y="Percent of default Vs No default") +
theme_few()
#vi. Purpose of Loan and Loan Status
dataset_to_analyze %>% group_by(purpose) %>% summarise(default.pct = (1-sum(binary_status)/n())) %>%
ggplot(aes(x = reorder(purpose, default.pct), y = default.pct)) +
geom_bar(stat = "identity", fill =  "coral", aes(color = I('black')), size = 0.1)+coord_flip()+xlab("Purpose") + ylab("default percent")+
theme_few()
options(repr.plot.width=6, repr.plot.height=8)
#vii. State and Loan Status
state.status <- dataset_to_analyze %>% group_by(addr_state) %>%
summarise(default.pct = (1-sum(binary_status)/n()))
ggplot(state.status, aes(x = reorder(addr_state, default.pct), y = default.pct)) +
geom_bar(stat = "identity", fill = "lightblue2", aes(color = I('white')), size = 0.1)+coord_flip()+xlab("States") + ylab("default percent")+
theme_few()
options(repr.plot.width=6, repr.plot.height=4)
#i. Loan Amount and Loan Status
ggplot(dataset_to_analyze, aes(x= loan_amnt)) + geom_density(aes(fill = as.factor(loan_status)))+
xlab("Loan_amount")+theme_few()
#ii. Interest Rate and Loan Status
ggplot(dataset_to_analyze, aes(x= int_rate, fill = loan_status)) +
geom_histogram(bins = 10, position = "fill", aes(color = I('black')), size = 0.1)+
xlab("Interest Rate")+
ylab("Percent of default Vs No default")+theme_few()
ggplot(dataset_to_analyze, aes(x = loan_status, y = int_rate, fill = loan_status)) + geom_boxplot()
#iii. Debt to Income(dti) and Loan Status
ggplot(dataset_to_analyze, aes(x= dti, fill = loan_status)) + geom_density()+
theme_few()
#iv. Number of inquiries made in last 6 months and Loan Status
ggplot(dataset_to_analyze, aes(x= factor(inq_last_6mths), fill = factor(loan_status))) +
geom_bar(position = "fill", aes(color = I('black')), size = 0.1)+
xlab("Inquiry in Last 6 months")+
ylab("Percent of default Vs No default")+theme_few()
ggplot(dataset_to_analyze, aes(x = loan_status, y = inq_last_6mths, fill = loan_status)) + geom_boxplot()
#iv. Number of inquiries made in last 6 months and Loan Status
ggplot(dataset_to_analyze, aes(x= factor(inq_last_6mths), fill = factor(loan_status))) +
geom_bar(position = "fill", aes(color = I('black')), size = 0.1)+
xlab("Inquiry in Last 6 months")+
ylab("Percent of default Vs No default")+theme_few()
ggplot(dataset_to_analyze, aes(x = loan_status, y = inq_last_6mths, fill = loan_status)) + geom_boxplot()
options(repr.plot.width=8, repr.plot.height=6)
corrplot(cor(dataset_to_analyze[,unlist(lapply(dataset_to_analyze, is.numeric))], use = "complete.obs"),
type = "lower", method = "number")
## CLEANUP ##
## Must not be performed - but could improve performance!
rm(list = ls())
